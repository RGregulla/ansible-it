---

- hosts: localhost
  gather_facts: False
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem
    aws_region: eu-central-1
    instance_type: t3.large
    # Red Hat Base Image
    main_image: ami-c86c3f23
    vpc_subnet_id: subnet-0b2309824de2d87bb

  tasks:
    - name: create ec2 instance from ami
      ec2:
        key_name: KeyPairSierra
        instance_type: "{{ instance_type }}"
        image: "{{ main_image }}"
        region: "{{ aws_region }}"
        wait: yes
        group: MySGPublic
        count: 1
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 30
        instance_tags:
          Name: sm-server-ami
        # Wait for the instance
      register: ec2

    - name: some output
      debug: var=ec2

    - name: Add the newly created host so that we can further contact it
      add_host:
        name: "{{ item.public_ip }}"
        groups: sm-server
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=60 timeout=320 state=started
      with_items: "{{ ec2.instances }}"

    # - name: Wait for SSH to come up
    #   wait_for: host={{ item.private_ip }} port=22 delay=180 timeout=320 state=started
    #   with_items: "{{ ec2.instances }}"

#
# Wait for the Image
#
- hosts: sm-server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem
    host_key_checking: false

  tasks:

    - raw: test -f /var/lib/cloud/instance/boot-finished
      retries: 20
      register: cmd_res
      changed_when: false
      #until: cmd_res | success
      until: cmd_res is success

    - name: some output
      debug:
        msg: "System up & running"

#
# Install sm-server om the created aws instance
#
- hosts: sm-server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem

  tasks:

    - name: get all ec2 facts
      ec2_metadata_facts:

    - name: debug all facts
      debug: var=ansible_facts

    - name: some output
      local_action:
        module: debug
        var: hostvars

    # - name: some output
    #   local_action:
    #     module: debug
    #     msg: "System is {{ hostvars[groups['sm-server'][0]]['instance_id'] }}"

- hosts: sm-server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem

  tasks:

    - name: get all ec2 facts
      ec2_metadata_facts:

    - name: dummy
      local_action: command echo "Willy" >> ~/.dummy

    - name: Show instance-id
      local_action:
        module: debug
        msg: "System Instance-Id is {{ ec2_instance_id }}"

    # Basic AMI Creation
    - name: create AMI
      local_action:
        module:  ec2_ami
        instance_id: "{{ ec2_instance_id }}"
        region: "{{ ec2_placement_region }}"
        wait: yes
        name: newtest
        tags:
          Name: sm-server

# # Terminate temporary Instance
# - hosts: sm-server
#   remote_user: ec2-user
#   vars:
#     ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem
#
#   tasks:
#
#     - name: Terminate aws instance
#         local_action:
#             module: ec2
#             region: "{{ aws_region }}"
#             state: 'absent'
#             instance_ids: "{{ hostvars[groups['sm-server'][0]]['instance_id'] }}"
#             wait: True
#         tags: terminateInstance
#       with_items: "{{ ec2.instances }}"
#
#
#     - name: create ec2 instance from ami
#       ec2:
#         key_name: KeyPairSierra
#         instance_type: "{{ instance_type }}"
#         image: "{{ main_image }}"
#         region: "{{ aws_region }}"
#         wait: yes
#         group: MySGPublic
#         count: 1
#         vpc_subnet_id: "{{ vpc_subnet_id }}"
#         assign_public_ip: yes
#         volumes:
#           - device_name: /dev/sda1
#             volume_type: gp2
#             volume_size: 30
#         instance_tags:
#           Name: sm-server-ami
#         # Wait for the instance
#       register: ec2
