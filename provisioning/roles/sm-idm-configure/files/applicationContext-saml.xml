<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


       <!-- isDiscovery value can be false or true, false means go to default IDP, true means select IDP on discovery page -->
       <bean id="samlSsoFilter" class="com.hp.ccue.identity.saml.websso.SamlSsoFilter">
              <property name="discovery" value="false"/>
              <property name="metadataManager" ref="metadata"/>
       </bean>

       <!-- Unsecured pages -->
       <security:http security="none" pattern="/favicon.ico"/>
       <security:http security="none" pattern="/images/**"/>
       <security:http security="none" pattern="/css/**"/>
       <security:http security="none" pattern="/logout.jsp"/>

       <!-- Secured pages with SAML as entry point -->
       <security:http pattern="/saml/**" use-expressions="true" auto-config="false" entry-point-ref="samlEntryPoint">
              <security:csrf disabled="true"/>
              <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
              <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
              <security:http-basic/>
       </security:http>


       <!-- Filters for processing of SAML messages -->
       <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
              <security:filter-chain-map request-matcher="ant">
                     <security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
                     <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
                     <security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
                     <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
                     <security:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery"/>
                     <security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
                     <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
              </security:filter-chain-map>
       </bean>

    <bean id="successRedirectHandler" class="com.hp.ccue.identity.saml.authentication.SamlAuthenticationSuccessHandler">
        <property name="ecpHandler" ref="ecpHandlerForTokenExchange"/>
        <property name="webSsoHandler" ref="webSsoHandler"/>
        <property name="defaultHandler" ref="defaultHandler"/>
    </bean>

    <!-- Redirect Handler for IDP initial workflow -->
    <bean id="idpInitRedirectHandler" class="com.hp.ccue.identity.saml.websso.IdpInitRedirectHandler">
        <property name="redirectUrlMapping">
            <map>
                <!-- default entry is used when user does not specify the target in the IDPI request or no mapping found for the specified target    -->
                <!-- /idm/v0/login/unconfigured is a built-in page for default idpi login     -->
                <entry key="default" value="https://localhost:9600/idm/v0/login/unconfigured"></entry>
                <entry key="launchpad" value="https://localhost:9000"></entry>
            </map>
        </property>
    </bean>

    <!-- Handler deciding where to redirect user after successful login
      property "hpssoTokenWriter will be autowired
    -->
    <bean id="webSsoHandler" class="com.hp.ccue.identity.saml.websso.WebSsoAuthenticationSuccessHandler" autowire="byName">
        <property name="tokenLocation" value="Header"/>
        <property name="tokenFactory" ref="tokenFactory"/>
        <property name="samlRedirectionHandler" ref="samlRedirectionHandler" />
        <property name="idpInitRedirectHandler" ref="idpInitRedirectHandler"/>
        <property name="cookieDomain" value="${idm.token.cookie.domain:.hpe.com}"/>
        <property name="accessTokenCookieKey" value="${idm.token.cookie.key:access_token}"/>
        <property name="secure" value="${idm.token.cookie.secure:true}"/>
        <property name="httpOnly" value="${idm.token.cookie.httpOnly:true}"/>
        <property name="addRequestTokenToUrl" value="true"/>
   </bean>

    <bean id="samlRedirectionHandler" class="com.hp.ccue.identity.saml.websso.SamlRedirectionHandler">
        <property name="tokenService" ref="tokenService"/>
    </bean>

    <bean id="ecpHandler" class="com.hp.ccue.identity.saml.ecp.authentication.EcpAuthenticationSuccessHandler" />

    <!-- START config for SAML ECP Client  -->
    <bean id="ecpHandlerForTokenExchange" class="com.hp.ccue.identity.saml.ecp.authentication.EcpExchangeTokenAuthenticationSuccessHandler">
        <!-- The location of JwtToken can be configured as Header/Body/Both  -->
        <property name="tokenLocation" value="Header"/>
        <property name="tokenFactory" ref="tokenFactory"/>
        <property name="tokenService" ref="tokenService"/>
        <property name="cookieDomain" value="${idm.token.cookie.domain:.hpe.com}"/>
        <property name="accessTokenCookieKey" value="${idm.token.cookie.key:access_token}"/>
        <property name="secure" value="${idm.token.cookie.secure:true}"/>
        <property name="httpOnly" value="${idm.token.cookie.httpOnly:true}"/>
    </bean>
    <!-- END config for SAML ECP Client  -->

    <bean id="defaultHandler"
          class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
    </bean>

    <!-- This is a SAML authentication failure handler which will dispatch the failing context to WebSSO/ECP/default failure handler -->
    <bean id="samlAuthenticationFailureHandler" class="com.hp.ccue.identity.saml.authentication.SamlAuthenticationFailureHandler">
        <property name="ecpAuthnFailureHandler" ref="ecpAuthnFailureHandler"/>
        <property name="webSsoAuthnFailureHandler" ref="webSsoAuthnFailureHandler"/>
        <!-- Default error handler when user failed to login in SAML ECP mode, in this case, as there's no session, the ecp authentication failure handler would be used -->
        <property name="defaultAuthnFailureHandler" ref="ecpAuthnFailureHandler"/>
    </bean>

    <!-- Handler deciding where to redirect user after failed login in SAML WebSSO mode -->
    <bean id="webSsoAuthnFailureHandler"
          class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="false"/>
        <property name="defaultFailureUrl" value="/idm/v0/login/invalid_token"/>
    </bean>

    <!-- Error handler when user failed to login in SAML ECP mode -->
    <bean id="ecpAuthnFailureHandler"
          class="com.hp.ccue.identity.saml.ecp.authentication.EcpExchangeTokenAuthenticationFailureHandler">
    </bean>

    <!-- Handler for successful logout -->
    <bean id="successLogoutHandler"
          class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/logout"/>
    </bean>

    <!-- Register authentication manager for SAML provider and administration UI -->
    <security:authentication-manager id="samlAuthenticationManager">
        <security:authentication-provider ref="samlAuthenticationProvider"/>
    </security:authentication-manager>

    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>

    <bean id="keyManager" class="com.hp.ccue.identity.saml.extend.IdmSamlKeystoreManager">
          <constructor-arg value="${idm.saml.keystore}"/>
          <constructor-arg type="java.lang.String" value="${idm.saml.keystore.password}"/>
          <constructor-arg>
             <map>
                    <entry key="${idm.saml.keystore.defaultKey.name}" value="${idm.saml.keystore.defaultKey.password}"/>
             </map>
          </constructor-arg>
          <constructor-arg type="java.lang.String" value="${idm.saml.keystore.defaultKey.name}"/>
          <constructor-arg type="java.lang.String" value="${idm.saml.keystore.type}"/>
          <!-- <constructor-arg type="java.lang.String" value="${idm.saml.keystore.provider}"/> -->
    </bean>

    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="com.hp.ccue.identity.saml.entry.IdmSamlEntryPoint">
          <property name="metadataManager" ref="metadata"/>
          <property name="tokenService" ref="tokenService"/>
          <property name="defaultProfileOptions">
                 <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                        <property name="includeScoping" value="false"/>
                 </bean>
          </property>
        <property name="idmSamlMessageStorageFactory" ref="storageFactory"/>
    </bean>

    <!-- IDP Discovery Service -->
    <bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
          <property name="idpSelectionPath" value="/saml/idpSelection.jsp"/>
    </bean>

    <!-- Filter automatically generates default SP metadata -->
    <bean id="metadataGeneratorFilter" class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
      <constructor-arg>
             <bean class="org.springframework.security.saml.metadata.MetadataGenerator">
                 <!-- Uncomment and set the entityBaseURL's value to the real base URL to fixate it when deploying IdM.
                 The entityID of the IdM's SAML metadata will be based on this URL.
                 If this value is not set, the entityID will be generated and cached based on values in the first server request.-->
                 <!--
                 <property name="entityBaseURL" value="http://localhost/idm-service"/>
                 -->
                <property name="bindingsSSO">
                   <list>
                      <value>post</value>
                      <value>artifact</value>
                      <value>paos</value>
                   </list>
                </property>
                <property name="extendedMetadata">
                   <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                      <property name="ecpEnabled" value="true" />
                      <!--
                      <property name="requireLogoutResponseSigned" value="true" />
                    -->
                   </bean>
                </property>
             </bean>
      </constructor-arg>
    </bean>


    <!-- The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metadata there -->
    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>

    <!-- Configure HTTP Client to accept certificates from the keystore for HTTPS verification. This is generally
        not needed and should usually be commented out. -->
    <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer">
          <property name="sslHostnameVerification" value="allowAll"/>
    </bean>

    <!-- download metadata file from IDP and backuped locally -->
    <bean id="metadata" class="com.hp.ccue.identity.saml.metadata.IdmMetadataManager">
          <constructor-arg ref="samlConfigService"/>
    </bean>

    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
    <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
          <property name="userDetails" ref="samlUserDetailsService"/>
    </bean>

     <bean id="samlUserDetailsService" class="com.hp.ccue.identity.saml.websso.SamlUserDetailsServiceImpl">
          <property name="tenantFactory" ref="tenantFactory"/>
          <property name="tokenFactory" ref="tokenFactory"/>
          <property name="userAndRepFactory" ref="samlUserAndRepFactory"/>
          <property name="samlConfigService" ref="samlConfigService"/>
          <property name="orgService" ref="organizationService"/>
          <property name="metadataManager" ref="metadata"/>
          <property name="storageFactory" ref="storageFactory"/>
    </bean>

    <!-- Provider of default SAML Context -->
    <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
          <!-- Sets underlying dataStore-->
          <property name="storageFactory" ref="storageFactory"/>
    </bean>

    <!-- Uses Database as underlying dataStore,instead of using default session -->
    <bean id="storageFactory" class="com.hp.ccue.identity.saml.storage.IdmDbSamlMessageStorageFactory">
        <property name="idmSamlMessageStorage" ref="idmSamlMessageStorage"/>
    </bean>

    <bean id="idmSamlMessageStorage" class="com.hp.ccue.identity.saml.storage.IdmDbSamlMessageStorage">
        <property name="lifetime" value="30"/>
        <property name="samlMessageDatabaseService" ref="samlMessageDatabaseService"/>
    </bean>

    <!-- Uses memory Cache as underlying dataStore,only supports single IDM server -->
    <!--
    <bean id="storageFactory" class="com.hp.ccue.identity.saml.storage.IdmCacheSamlMessageStorageFactory">
          <property name="lifetime" value="15"/>
          <property name="maxSize" value="10000"/>
    </bean>
    -->

    <!-- Processing filter for WebSSO profile messages -->

    <bean id="samlWebSSOProcessingFilter" class="com.hp.ccue.identity.saml.websso.IdmSamlProcessingFilter">
        <property name="authenticationManager" ref="samlAuthenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="samlAuthenticationFailureHandler"/>
    </bean>


    <!-- Processing filter for WebSSO Holder-of-Key profile -->

    <bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
        <property name="authenticationManager" ref="samlAuthenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="samlAuthenticationFailureHandler"/>
    </bean>


   <!-- Logout handler terminating local session -->

   <bean id="logoutHandler"
         class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
          <property name="invalidateHttpSession" value="false"/>
   </bean>


   <!-- Override default logout processing filter with the one processing SAML messages -->

   <bean id="samlLogoutFilter" class="com.hp.ccue.identity.saml.websso.IdmSamlLogoutFilter">
          <constructor-arg index="0" ref="samlRedirectionHandler"/>
          <constructor-arg index="1" ref="logoutHandler"/>
          <constructor-arg index="2" ref="logoutHandler"/>
   </bean>


   <!-- Filter processing incoming logout messages -->
   <!-- First argument determines URL user will be redirected to after successful global logout -->

   <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
          <constructor-arg index="0" ref="samlRedirectionHandler"/>
          <constructor-arg index="1" ref="logoutHandler"/>
   </bean>


   <!-- Class loading incoming SAML messages from httpRequest stream -->

   <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
          <constructor-arg>
                 <list>
                        <ref bean="redirectBinding"/>
                        <ref bean="postBinding"/>
                        <ref bean="artifactBinding"/>
                        <ref bean="soapBinding"/>
                        <ref bean="paosBinding"/>
                 </list>
          </constructor-arg>
   </bean>


   <!-- SAML 2.0 WebSSO Assertion Consumer -->

   <bean id="webSSOprofileConsumer" class="com.hp.ccue.identity.saml.extend.IdmWebSSOProfileConsumerImpl"/>


   <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->

   <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>


   <!-- SAML 2.0 Web SSO profile -->

   <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>


   <!-- SAML 2.0 Holder-of-Key Web SSO profile -->

   <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>


   <!-- SAML 2.0 ECP profile -->

   <bean id="ecpprofile" class="com.hp.ccue.identity.saml.websso.IdmWebSsoProfileEcpImpl"/>


   <!-- SAML 2.0 Logout Profile -->
   <bean id="logoutprofile" class="com.hp.ccue.identity.saml.websso.SLOProfileImpl">
      <property name="requireLogoutResponseSigned" value="true" />
   </bean>


   <!-- Bindings, encoders and decoders used for creating and parsing messages -->

   <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
          <constructor-arg ref="parserPool"/>
          <constructor-arg ref="velocityEngine"/>
   </bean>

   <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
          <constructor-arg ref="parserPool"/>
   </bean>

   <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
      <constructor-arg ref="parserPool"/>
      <constructor-arg ref="velocityEngine"/>
      <constructor-arg>
         <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
            <constructor-arg>
                <bean class="org.apache.commons.httpclient.HttpClient">
                    <constructor-arg>
                        <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
                    </constructor-arg>
                </bean>
            </constructor-arg>
            <property name="processor">
                <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                    <constructor-arg ref="soapBinding"/>
                </bean>
            </property>
         </bean>
      </constructor-arg>
   </bean>

   <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
          <constructor-arg ref="parserPool"/>
   </bean>

   <bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
          <constructor-arg ref="parserPool"/>
   </bean>

   <!-- Initialization of OpenSAML library -->
    <bean class="com.hp.ccue.identity.saml.extend.CustomerSAMLBootstrap" >
        <!-- Support RSA SHA256 algorithm, by default using sha256. Need Identity Provider configuration support.-->
        <property name="algorithmId" value="rsa-sha256" />
    </bean>

   <!-- Initialization of the velocity engine -->
   <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
         factory-method="getEngine"/>

   <!-- XML parser pool needed for OpenSAML parsing -->

   <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize">
          <property name="builderFeatures">
                 <map>
                        <entry key="http://apache.org/xml/features/dom/defer-node-expansion" value="false"/>
                 </map>
          </property>
   </bean>

   <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder"/>

</beans>
