---

- name: install Python Module Manager
  yum:
    name: python2-pip
    state: latest
  tags: prepare
  become: yes

- name: install python module pexpect
  pip:
    name: pexpect
    state: latest
  tags: prepare
  become: yes
  # There is an error at installation of the module which can ignored
  #ignore_errors: yes

- name: create sm installdir
  file: path={{ itsm_sm.installation.filepath }} state=directory mode=0755 owner={{ install_user }}
  tags: prepare
  become: yes

- name: Copy ITSM Archive and Unarchive it
  unarchive: src={{ itsm_sm.source.sm_bin }} dest={{ itsm_sm.installation.filepath }} mode=0755 owner={{ install_user }}
  tags: prepare
  become: yes

- name: chmod Installation Files
  file:
    path: "{{ itsm_sm.installation.bin_path }}/{{ itsm_sm.installation.bin }}"
    mode: 0777
  tags: prepare
  become: yes

- name: create target itsm directory
  file:
    path: "{{ itsm_sm.installation.install_dir }}"
    state: directory
    owner: "{{ install_user }}"
    mode: 0755
  tags: prepare
  become: yes

- name: install itsm
  expect:
    command: "{{ itsm_sm.installation.bin_path }}/{{ itsm_sm.installation.bin }} -i console"
    responses:
      'PRESS \<ENTER\> TO CONTINUE:' : ''
      'DO YOU ACCEPT THE TERMS OF THIS LICENSE AGREEMENT?' : 'Y'
      'ENTER AN ABSOLUTE PATH, OR PRESS \<ENTER\> TO ACCEPT THE DEFAULT' : "{{ itsm_sm.installation.install_server_dir }}"
      'IS THIS CORRECT?' : 'Y'
      'PRESS \<ENTER\> TO EXIT THE INSTALLER' : ''
  tags: install

- name: add sm.ini
  copy:
    src: sm.ini
    dest: "{{ itsm_sm.installation.install_server_dir }}/RUN"
    owner: "{{ install_user }}"
    mode: 0755

- name: link jre in sm installation
  command: "{{ itsm_sm.installation.install_server_dir }}/RUN/setupLinks.sh jre"
  environment:
    JAVA_HOME: "{{ java.installation.install_path }}/{{ java.installation.java_dir }}"
  tags: install

- name: create patches installdir
  file: path={{ itsm_sm.patch.patch_path }} state=directory mode=0755 owner={{ install_user }}
  tags: patch
  become: yes

- name: copy itsm patch and unarchive it
  unarchive: src={{ itsm_sm.patch.patch_file }} dest={{ itsm_sm.patch.patch_path }} mode=0755 owner={{ install_user }}
  tags: patch
  become: yes

- name: unarchive patch
  unarchive:
    src: "{{ itsm_sm.patch.patch_path }}/{{ itsm_sm.patch.patch_patch }}"
    dest: "{{ itsm_sm.patch.patch_path }}"
    mode: 0755
    owner: "{{ install_user }}"
    remote_src: yes
  tags: patch
  become: yes

- name: create patches backupdir
  file: path={{ itsm_sm.patch.patch_backup }} state=directory mode=0755 owner={{ install_user }}
  tags: patch
  become: yes

- name: create logdir
  file: path="{{ itsm_sm.installation.install_server_dir }}/logs" state=directory mode=0755 owner={{ install_user }}
  tags: patch

- name: install itsm patch
  expect:
    command: "{{ itsm_sm.patch.patch_path }}/{{ itsm_sm.patch.patch_cmd }}"
    chdir: "{{ itsm_sm.installation.install_server_dir }}"
    responses:
      'SM Server installation directory' : "{{ itsm_sm.installation.install_server_dir }}"
      'SM Server backup directory' : "{{ itsm_sm.patch.patch_backup }}"
      'ENTER AN ABSOLUTE PATH, OR PRESS \<ENTER\> TO ACCEPT THE DEFAULT' : "{{ itsm_sm.installation.install_server_dir }}"
      'IS THIS CORRECT?' : 'Y'
      'PRESS \<ENTER\> TO EXIT THE INSTALLER' : ''
  tags: patch

- name: create temporary license
  shell: "{{ itsm_sm.installation.install_server_dir }}/RUN/sm -instanton"
  args:
    executable: /bin/bash
    chdir: "{{ itsm_sm.installation.install_server_dir }}/RUN"
  tags: license

  # [vagrant@localhost Server]$ ./configure -consolemode
  # WARNING: This program is meant for out-of-box system configuration.
  # It will overwrite your current settings in sm.ini.
  # Please backup your sm.ini file.
  # Enter httpPort (Current value - 13080 ):
  # Choose Database Type:
  # (0) Oracle 12c
  # (1) PostgreSQL (Current value - 1 ):
  # Enter Database name (Current value - host=localhost port=5432 dbname=smdb ):
  # Enter SQL user (Current value -  ):smuser
  # Enter SQL password (Current value -  ):smpassw0rd
  # Enter Postgres Schema (Current value - sm ):sm
  # Case Insensitive?(Y or N) (Current value - Y ):N
  # Updating new configuration to sm.ini...
  # Validating SQL connectivity.... Please wait....

- name: configure itsm
  expect:
    command: "{{ itsm_sm.installation.install_server_dir }}/configure -consolemode"
    chdir: "{{ itsm_sm.installation.install_server_dir }}"
    responses:
      'Enter httpPort' : "{{ itsm_sm.installation.server_port }}"
      'Choose Database Type' : '1'
      'Enter Database name' : 'host={{ itsm_sm.installation.server_dbhost }} port=5432 dbname={{ dbname }}'
      'Enter SQL user' : '{{ dbuser }}'
      'Enter SQL password' : '{{ dbpassword }}'
      'Enter Postgres Schema': '{{ dbschema }}'
      'Case Insensitive?': 'N'
      'Do you wish to load Service Manager application and demo data to the Database': 'Y'
  # there are some ignorable errors in the output
  ignore_errors: yes
  tags: configure

- name: start sm
  shell: "{{ itsm_sm.installation.install_server_dir }}/RUN/smstart"
  args:
    executable: /bin/bash
    chdir: "{{ itsm_sm.installation.install_server_dir }}/RUN"
  tags: start

# - name: shutdown sm
#   shell: "{{ itsm_sm.installation.install_server_dir }}/RUN/sm -shutdown"
#   args:
#     executable: /bin/bash
#     chdir: "{{ itsm_sm.installation.install_server_dir }}/RUN"
#   tags: license
