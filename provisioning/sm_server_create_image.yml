---

- hosts: localhost
  gather_facts: False
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem
    aws_region: eu-central-1
    instance_type: t3.large
    # Red Hat Base Image
    main_image: ami-c86c3f23
    vpc_subnet_id: subnet-0b2309824de2d87bb
    iam_role: S3Reader
    sm_server_version: 9.61

  tasks:
    - name: create ec2 instance from ami
      ec2:
        key_name: KeyPairSierra
        instance_type: "{{ instance_type }}"
        image: "{{ main_image }}"
        region: "{{ aws_region }}"
        wait: yes
        group: MySGPublic
        count: 1
        vpc_subnet_id: "{{ vpc_subnet_idÂ }}"
        assign_public_ip: yes
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 30
        instance_tags:
          Name: sm-server-ami
          Version: "{{ sm_server_version }}"
        instance_profile_name: "{{ iam_role }}"
        # Wait for the instance
      register: ec2

    - name: some output
      debug: var=ec2

    - name: Add the newly created host so that we can further contact it
      add_host:
        name: "{{ item.public_ip }}"
        groups: sm-server
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=60 timeout=320 state=started
      with_items: "{{ ec2.instances }}"

    # - name: Wait for SSH to come up
    #   wait_for: host={{ item.private_ip }} port=22 delay=180 timeout=320 state=started
    #   with_items: "{{ ec2.instances }}"

#
# Wait for the Image
#
- hosts: sm-server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem
    host_key_checking: false

  tasks:

    - name: check for boot finished
      raw: test -f /var/lib/cloud/instance/boot-finished
      retries: 20
      register: cmd_res
      changed_when: false
      #until: cmd_res | success
      until: cmd_res is success

    - name: some output
      debug:
        msg: "System up & running"

#
# Install sm-server on temporary Instance
#
- hosts: sm-server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem
    install_user: ec2-user
    sm_dbname: smdb
    sm_dbschema: sm
    sm_dbuser: smuser
    sm_dbpassword: smpassw0rd
    sm_postgres_user: postgres
    #sm_server_dbhost: itsm-db.ch1znfaihylb.eu-central-1.rds.amazonaws.com
    sm_server_dbport: 5432
    remote_src: yes
    java:
      home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-7.b13.el7.i386/jre
      source:
        #download_url: https://rpmfind.net/linux/centos/7.6.1810/os/x86_64/Packages/java-1.8.0-openjdk-headless-1.8.0.181-7.b13.el7.i686.rpm
        download_url: https://rpmfind.net/linux/centos/7.6.1810/updates/x86_64/Packages/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.i686.rpm
        download_folder: /tmp
        java_archive: jdk-8u192-linux-x64.tar.gz
        #download_cmd: "wget --continue --no-check-certificate -O /tmp/{{ java.source.java_archive }} --header \"Cookie: oraclelicense=a\" {{ java.source.install_file }}"
        #install_rpm: https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jre-8u191-linux-i586.rpm
        #install_wget_rpm: wget --continue --no-check-certificate -O jdk-8u191-linux-x64.rpm --header "Cookie: oraclelicense=a" https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jre-8u191-linux-i586.rpm
        #install_wget_tar: wget --continue --no-check-certificate -O jdk-8u191-linux-x64.tar.gz --header "Cookie: oraclelicense=a" https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jre-8u191-linux-i586.tar.gz
        #install_wget_tar: wget --continue --no-check-certificate -O jdk-8u192-linux-x64.tar.gz --header "Cookie: oraclelicense=a" https://download.oracle.com/otn-pub/java/jdk/8u192-b12/750e1c8617c5452694857ad95c3ee230/jre-8u192-linux-i586.tar.gz
      installation:
        install_path: /opt/java
        java_dir: jre1.8.0_192
        server_port: 13080

  roles:
    - prepare-ansible
    - common
    - jdk
    - sm-server
    - sm-server-patch

#
# Create AMI from Temporary Instance
#
- hosts: sm-server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem
    ami_name: SM-Server
    sm_version: 9.61

  tasks:
    - name: get all ec2 facts
      ec2_metadata_facts:

    - name: Show instance-id
      local_action:
        module: debug
        msg: "System Instance-Id is {{ ansible_ec2_instance_id }}"

    # Basic AMI Creation
    - name: create AMI
      local_action:
        module:  ec2_ami
        instance_id: "{{ ansible_ec2_instance_id }}"
        region: "{{ ansible_ec2_placement_region }}"
        wait: yes
        name: "{{ ami_name }}-{{ sm_version }}"
        tags:
          Name: sm-server
          Version: "{{ sm_version }}"

#
# Terminate temporary Instance
#
- hosts: sm-server
  remote_user: ec2-user
  vars:
    ansible_ssh_private_key_file: ~/.ssh/AWSSierra.pem

  tasks:
    # Get all Data from Temporary Instance
    - name: get all ec2 facts
      ec2_metadata_facts:

    # Destroy Instance
    - name: Terminate aws instance
      local_action:
        module: ec2
        state: 'absent'
        instance_ids: "{{ ansible_ec2_instance_id }}"
        region: "{{ ansible_ec2_placement_region }}"
        wait: True
      tags: terminateInstance
